/************************************************************************
 *
 * Definition of Automatic Differentiation Type
 * --------------------------------------------
 *
 * Copyright (C) 1993, 1997 Olaf Knueppel
 *
 * This file is part of PROFIL/BIAS.
 *
 * PROFIL/BIAS is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * $Id: AutoDiff.hgen 478 2006-08-09 13:13:30Z keil $
 *
 ************************************************************************/

// This is a generic file for automatic forward differentiation.
// The computation of the second derivative is optional.
// If the second derivative (hessian) is required, the macro
//   AUTODIFF_COMPUTE_HESSIAN
// must be defined.
//
// The following macros must be defined before this file is included:
//
//   AUTODIFF_TYPE         name of the new automatic differentiation type
//   AUTODIFF_SIMPLE_TYPE  name of the element type
//   AUTODIFF_VECTOR_TYPE  type name of the gradient for its own
//   AUTODIFF_MATRIX_TYPE  type name of the hessian (if needed)
//

class AUTODIFF_TYPE
{
  AUTODIFF_SIMPLE_TYPE value;
  AUTODIFF_VECTOR_TYPE grdn;
#ifdef AUTODIFF_COMPUTE_HESSIAN
  AUTODIFF_MATRIX_TYPE hessn;
#endif
public:
#ifdef AUTODIFF_COMPUTE_HESSIAN
  INT ComputeHessian;  // If TRUE, the hessian is computed
#endif
  AUTODIFF_TYPE (INT n = 0, INT CompHess = 1);
  AUTODIFF_SIMPLE_TYPE & fkt () CONST    { return ((AUTODIFF_TYPE *) this)->value; }
  AUTODIFF_VECTOR_TYPE & grd () CONST    { return ((AUTODIFF_TYPE *) this)->grdn; }
#ifdef AUTODIFF_COMPUTE_HESSIAN
  AUTODIFF_MATRIX_TYPE & hessian() CONST { return ((AUTODIFF_TYPE *) this)->hessn; }
#endif
  AUTODIFF_TYPE (CONST AUTODIFF_VECTOR_TYPE & v, INT CompHess = 1);
  operator CONST AUTODIFF_VECTOR_TYPE & () CONST { return grdn; }
#ifdef AUTODIFF_COMPUTE_HESSIAN
  operator CONST AUTODIFF_MATRIX_TYPE & () CONST { return hessn; }
#endif
  operator CONST AUTODIFF_SIMPLE_TYPE & () CONST { return value; }
  AUTODIFF_TYPE & operator = (CONST AUTODIFF_TYPE &);
  AUTODIFF_TYPE & operator = (REAL);
  AUTODIFF_TYPE operator () (INT) CONST;
  AUTODIFF_TYPE operator + ()      { return *this;}
  friend INT Dimension (CONST AUTODIFF_TYPE & g)
    { return Dimension(g.grdn); }
  friend AUTODIFF_SIMPLE_TYPE & FunctionValue (CONST AUTODIFF_TYPE & a)
    { return ((AUTODIFF_TYPE &) a).value; }
  friend AUTODIFF_VECTOR_TYPE & GradientValue (CONST AUTODIFF_TYPE & a)
    { return ((AUTODIFF_TYPE &) a).grdn; }
#ifdef AUTODIFF_COMPUTE_HESSIAN
  friend AUTODIFF_MATRIX_TYPE & HessianValue  (CONST AUTODIFF_TYPE & a)
    { return ((AUTODIFF_TYPE &) a).hessn; }
#endif
  friend AUTODIFF_TYPE operator - (CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator + (CONST AUTODIFF_TYPE &, CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator + (CONST AUTODIFF_TYPE &, REAL);
  friend AUTODIFF_TYPE operator + (REAL,            CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator - (CONST AUTODIFF_TYPE &, CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator - (CONST AUTODIFF_TYPE &, REAL);
  friend AUTODIFF_TYPE operator - (REAL,            CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator * (CONST AUTODIFF_TYPE &, CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator * (CONST AUTODIFF_TYPE &, REAL);
  friend AUTODIFF_TYPE operator * (REAL,            CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator / (CONST AUTODIFF_TYPE &, CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE operator / (CONST AUTODIFF_TYPE &, REAL);
  friend AUTODIFF_TYPE operator / (REAL,            CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE Sqr  (CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE Sqrt (CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE Sin  (CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE Cos  (CONST AUTODIFF_TYPE &);
  friend AUTODIFF_TYPE Exp  (CONST AUTODIFF_TYPE &);
};


/*
 * Local Variables:
 * mode: C++
 * End:
 */
