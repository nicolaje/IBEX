(maintain each list from top to bottom)


30 Sep 2010 - Release 1.5.0
===========================

code quality & new features:
- changed memory handling in class DataKey: replacing bitfield implementation by two int's
- improved handling of singular bases and cycling: automatically restart from initial basis with tighter tolerances
- major rework of simplifier SPxMainSM: "localized" postsolving steps; several bugfixes concerning basis statuses, dual
  values and reduced costs
- performance improved in simplifier SPxMainSM: always processing singleton rows before finding duplicate rows; ignoring
  singleton rows and columns when checking for linear dependency

interface:
- submakefile for FreeBSD added
- added command line option '-y' to output dual row multipliers
- additional interface method SoPlex::setBasis to set starting basis if no simplifer present

fixed bugs:
- bug in class SoPlex appearing when LP is solved completely in simplifier and optimal solution retrieved
- bug in spxbasis.cpp: when basis is detected as singular during update step, now we refactorize to double check; if the
  singularity is not resolved we exit with correct status 
- bug in simplifier postsolving: empty columns may not only be fixed to bounds but also to zero for free variable
- bug in SPxSolver::setPricer() appearing when switching pricers in initialized state
- bug in simplifier SPxMainSM yielding incorrect dual values and reduced costs for maximization problems
- bug in simplifier SPxMainSM for postsolving of free columns with zero objective
- bug in factorization triggered by column singletons with nonzeros below numerical zero tolerance


11 Sep 2009 - Release 1.4.2
===========================

code quality & new features:
- in class SoPlex, enabled getBasis... methods also when simplifier is present and basis suboptimal, but regular
- added check for stalling in main solve loop SPxSolver::solve(): if objective value and shift haven't changed after a
  large number of iterations, switch algorithm; this fixes a timeout of SCIP/SoPlex on instance glass4 (MIPLIB2003)

interface:
- small change in spxmpswrite.cpp: always write the default upper bound of 1.0 for integer variables, since CPLEX seems
  to set infinity otherwise
- added method 'std::string statistics() const' to classes SoPlex, SPxSolver, SPxBasis, SLinSolver, SLUFactor, returning
  statistical information like number of factorizations etc.
- added method 'Real cumulativeTime() const' to class SPxSolver returning time used in all calls to method solve() since
  beginning or last call of 'resetCumulativeTime()'
- implemented copy constructors and assignment operators for almost all classes, especially SoPlex and SPxSolver
- the set methods (for pricer, ratiotester, ...) in classes SoPlex and SPxSolver now have an optional boolean parameter
  (false by default) controlling whether the memory of the object handed over shall be managed internally; this does not
  affect the default behaviour of the interface methods
- the constructor of class SPxSolver does not have parameters for pricer, ratiotester and starter, anymore; use the set
  methods instead

fixed bugs:
- now correctly resetting basis status to REGULAR in method SPxSolver::loadBasis()
- memory bug in function memPack() in svset.cpp; this method is now called to clean up memory, in case too much memory
  is wasted; this removes a large increase of the use of memory as tested in tests/testMemory.cpp
- bug in formulas for triggering refactorizations after increased relative/absolute fill
- memory leak in class SPxMainSM when calling simplify() multiple times
- bug in class DataKey leading to a segmentation fault when reading LPs with more than 8,388,607 variables or
  constraints: now the maximum number allowed is 536,870,911 and asserted in debug mode
- numerical bug in SPxFastRT leading to failed assert 'rep() == ROW' (in leave.cpp): in column/leaving algorithm, now we
  only consider nonbasic variables for entering the basis


20 Feb 2009 - Release 1.4.1
===========================

code quality & new features:
- speed up of the simplifier due to combined removal of rows/columns and combined updates of lhs and rhs in some cases
- overworked spxfastrt.h, spxfastrt.cpp
- added method isDescValid() in class SPxBasis to check if a descriptor is valid w.r.t. to the bounds of the loaded LP;
  use this to check whether previous/given basis can be loaded in SoPlex::solve()

interface:
- small changes in spxlpfwrite.cpp: make bounds LP-format conform, output 'generals' only if integer variables present
- added new method writeState() to classes SoPlex and SPxSolver for dumping LP, basis, and parameter settings at once

fixed bugs:
- bug in simplifier spxmainsm.cpp: wrong init for postsolving free column singletons fixed
- wrong bugfix in spxsolver.cpp:maxInfeas(): the leave and entering case were switched back
- endless loop triggered by different values of feasibility/optimality tolerance for pricer in spxsolve.cpp
- memory handling in class UnitVector
- bug when resolving in SoPlex::solve() after change of LP


30 Sep 2008 - Release 1.4.0
===========================

code quality & new features:
- split the main() method in example.cpp into several smaller methods
- created directory 'tests' that should contain small programs that illustrate a (former) bug in SoPlex or something
  like unit tests
- added member function precision() in spxout.h
- changed main target to soplexmain (from example)
- soplexmain.cpp now contains the main function, the output of this function should be more readable than the one of
  example; original output can be turned on with the "-C" command line argument, the example is now available as target
  'example' in the makefile
- name unification:
  + moved SPxLP::readFile() from spxfileio.cpp to spxio.cpp
  + renamed SPxLP::dumpFile() to SPxLP::writeFile(), included default params, moved it from spxlpfwrite.cpp to spxio.cpp
- simplified postsolving in spxmainsm.cpp (do not recompute reduced costs)
- overworked spxbasis.cpp:readBasis(): fixed bug and removed superflous code at end
- added fixing of the basis status if ZERO/P_FREE is not appropriate anymore, see varStatusToBasisStatusCol() and
  varStatusToBasisStatusRow() in spxsolver.cpp
- removed superfluous variable 'count' in spxparmultpr.cpp/h
- modifications in the simplifier SPxMainSM to avoid numerical problems
- modified reading and writing of basis: the row and column names are now passed as pointers; default names are
  entered if the pointers are 0; the changes appear in soplexmain.cpp, spxbasis.cpp, soplex.cpp, soplex.h

interface:
- introduced exceptions for all unrecoverable errors (lack of memory, no pricer, singular basis, etc.) to allow a
  calling application to clean up
- command line options "-V" and "-h" of example solver now output info on compilation flags
- replaced SPxLP::operator<< by SPxLP::writeLPF()
- implemented basic handling of reading a basis file (not yet thoroughly tested); the basic changes are in example.cpp,
  spxbasis.cpp, soplex.cpp, soplex.h
- added option to produce shared libraries with x86-Linux (OPT=opt-shared)
- constructor interface for the scalers SPxEquiliSC and SPxGeometSC changed: parameter colFirst is removed since the
  corresponding member is not used; printed names of the scalars are slightly changed; there are only 5 command line
  options for the scalar left since two of the previous 6 options coincided

fixed bugs:
- two bugs in spxlpfread.cpp: variables appearing in the bounds and general/integer/binary section
- bug in changeElement(): it now works also in the initial phase (NO_PROBLEM); aA corresponding test file is
  'tests/testChangeElement.cpp'
- bug in forest.cpp: use proper array access instead of pointer iteration
- bug concerning the termination value (objective limit) in spxsolve.cpp
- memory leak in postsolving of spxmainsm.cpp
- bug in spxchangebasis.cpp, addedRows(), addedCols(): need to call loadMatrixVecs in all cases, since the references to
  the matrix might have been invalided due to reallocation
- bug with detecting infeasible instances if scaling theCoTest does not help
- bug in spxlpfread.cpp with bounds on binary (old bounds were discarded)
- bug in spxsolver.cpp:maxInfeas(): the leave and entering case were switched
- bug in SLUFactor::solveRight4update(): now variable n is storing ssvec's size correctly
- bug in leave.cpp, left over from previous correction dealing with infeasible instances


27 Aug 2007 - Release 1.3.2
===========================

interface:
- keyword RANGES added in MPS format output (spxmpswrite.cpp)
- extended FAQ

fixed bugs:
- bug in spxmainsm.cpp concerning index mapping
- bug in unsimplify() if the problem has vanished in preprocessing
- missing check for singular basis at the end of factorize() in spxsolver.cpp
- assertion bug in FreeZeroObjVariablePS::execute() of spxmainsm.cpp
- bug in SVector::dim(): has to return the dimension and not the maximal index


21 Sep 2006 - Release 1.3.1
===========================

code quality & new features:
- made writeBasis() and writeBasisFile() in SoPlex and SPxSolver const-methods
- added SPxLP::writeLPF() with some parameters to dump an LP in .lp-format with variable and row names; this also fixes
  some output bugs; the still existing SPxLP::operator<< uses self-created default names
- check for necessary rounding added to spxmainsm

interface:
- restructured example.cpp and added a small example on constructing an LP using the callable library methods

fixed bugs:
- bug in spxmainsm: IDs of rows and columns are not used anymore
- bug in spxmainsm in connection with free variables
- bug in soplex method unsimplify(): check whether problem vanished in preprocessing added
- bug in spxlpfreader in connection with strange input (unconstrained rows)
- bug in ssvector: use ssvec.size() instead of b.size() (the former may be smaller due to flattened near-zero values)


03 Feb 2006 - Release 1.3.0
===========================

code quality & new features:
- a lot of stuff we have already forgotten about
- new preprocessing
- the number of warnings issued for ignored entries in MPS files is now limited to 1000 per file
- improved stability of textbook ratio tester
- added reference solution files for further LP suites
- extensive testing: coverage analysis and valgrind; new binary "exercise_LP_changes" performs kind of unit tests for LP
  change interface
- some assertions may be converted to generate warnings if NDEBUG is given; compile with "-DWITH_WARNINGS" to achieve this
- revised the whole documentation and made it doxygen-compatible
- made one-argument constructors explicit, added virtual destructors, blocked copy constructors and assignment operators
- rewrote major parts of ssvector.cpp to avoid pointer arithmetic
- added the spxout class to redirect output depending on the error level, provided all messages with a unique code for
  finding it with grep
- improvement of the LPF and MPS readers
- dropped all unused functions from the SLinSolver interface

interface:
- status output is now human-readable
- methods obj(), rhs(), lhs(), upper(), lower(), maxObj() of SPxLP that returned a non const reference renamed to *_w and
  made protected; use changeXXX() methods outside the class
- methods nofCols(), nofRows(), nofNZEs() deleted; use nCols(), nRows(), nNzos() instead
- methods obj(), rhs(), lhs(), upper(), lower(), maxObj() of LPColSet and LPRowSet that returned a non const reference
  renamed to *_w
- LPColSet: renamed obj() methods to maxObj()/maxObj_w(), renamed writable lower(), upper() methods to
  lower_w()/upper_w(), removed SPxLP::obj()
- LPRowSet: renamed writable lhs()/rhs() methods to lhs_w()/rhs_w()
- SPxSolver has got an additional NOT_INIT (not properly initialized) status
- renamed SPxDefaultPR to SPxDantzigPR

fixed bugs:
- bug in SPxSumST
- bug in memory allocation of SVSet: now uses doubling strategy correctly; the bug led to serious performance
  degradation on large LPs under Windows, which is now fixed
- some bugs in LP change interface
- segmentation fault in Forrest-Tomlin update
- bug in SSVector where zero vectors were not handled properly
- bug in example.cpp which resulting in ignoring the update type switch


10 Apr 2002 - Release 1.2.1
===========================

- interface of SoPlex::terminate() changed
- SoPlex::setRep(int) changed to SoPlex::setRep(Representation)


16 Jan 2002 - Release 1.2.0
===========================

(empty)