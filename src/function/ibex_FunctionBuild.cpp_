/* =========Ã©===================================================================
 * I B E X - Functions
 * ============================================================================
 * Copyright   : Ecole des Mines de Nantes (FRANCE)
 * License     : This program can be distributed under the terms of the GNU LGPL.
 *               See the file COPYING.LESSER.
 *
 * Author(s)   : Gilles Chabert
 * Created     : Jan 5, 2012
 * ---------------------------------------------------------------------------- */

#include "ibex_Function.h"
#include "ibex_Expr.h"
#include "ibex_Decorator.h"
#include "ibex_ExprCopy.h"
#include "ibex_Eval.h"
#include "ibex_HC4Revise.h"
#include "ibex_Gradient.h"
#include "ibex_String.h"

using namespace std;

namespace ibex {

namespace {

/*
 * Find the components used in the function
 * \pre the symbol keys must have been set
 */
class FindInputsUsed: public ExprVisitor {
public:
	std::vector<bool>& is_used;
	int* symbol_index;
	int current_index;

	FindInputsUsed(const Array<const ExprSymbol>& x, const ExprNode& y, std::vector<bool>& is_used) : is_used(is_used) {
		symbol_index = new int[x.size()];
		int index=0;

		for (int i=0; i<x.size(); i++) {
			symbol_index[i]=index;
			for (int j=0; j<x[i].dim.size(); j++) {
				index++;
				is_used.push_back(false); // by default
			}
		}

		visit(y);

		if (current_index!=-1) is_used[current_index]=true;
		delete[] symbol_index;
	}

	virtual void visit(const ExprNode& e)     {
		e.acceptVisitor(*this);
	}

	virtual void visit(const ExprLeaf& e)     {
		e.acceptVisitor(*this);
	}

	virtual void visit(const ExprIndex& e)    {
		visit(e.expr);
		if (current_index!=-1)
			current_index+=e.index*e.dim.size();
		// symbol_index is left unchanged.
	}

	virtual void visit(const ExprSymbol& e)   {
		current_index=symbol_index[e.key];
	}

	virtual void visit(const ExprConstant&)   {
		current_index=-1;
	}

	virtual void visit(const ExprNAryOp& e)   {
		for (int i=0; i<e.nb_args; i++) {
			visit(*e.args[i]);
			if (current_index!=-1) is_used[current_index]=true;
		}
		current_index=-1;
	}

	virtual void visit(const ExprBinaryOp& e) {
		visit(e.left);
		if (current_index!=-1) is_used[current_index]=true;
		visit(e.right);
		if (current_index!=-1) is_used[current_index]=true;
		current_index=-1;
	}

	virtual void visit(const ExprUnaryOp& e)  {
		visit(e.expr);
		if (current_index!=-1) is_used[current_index]=true;
		current_index=-1;
	}

};

/**
 * Set the id number of each node and
 * push all the nodes into a vector (ordered by id).
 */
class BuildVectorOfNodes: public ExprVisitor {
public:
	vector<const ExprNode*>& nodes;
	int id;

	BuildVectorOfNodes(vector<const ExprNode*>& nodes, const Array<const ExprSymbol>& x, const ExprNode& y) : nodes(nodes), id(0) {
		for (int i=0; i<x.size(); i++) {
			nodes.push_back(&x[i]);
			(int&) x[i].id=id++;
		}
		visit(y);
	}

	virtual void visit(const ExprNode& e) {
		if (e.id==-1) {
			e.acceptVisitor(*this);
			nodes.push_back(&e);
			(int&) e.id=id++;
		}
	}

	virtual void visit(const ExprIndex& e)    { visit(e.expr); }
	virtual void visit(const ExprLeaf& e)     { }
	virtual void visit(const ExprNAryOp& e)   { for (int i=0; i<e.nb_args; i++) { visit(*e.args[i]); } }
	virtual void visit(const ExprBinaryOp& e) { visit(e.left); visit(e.right); }
	virtual void visit(const ExprUnaryOp& e)  { visit(e.expr); }
};

const char* duplicate_or_generate(const char* name) {
	if (name) return strdup(name);
	else return strdup(ibex::next_generated_func_name());
}

}

Function::Function() : name(strdup(next_generated_func_name())) {

}

Function::Function(const ExprSymbol& x, const ExprNode& y, const char* name) : name(duplicate_or_generate(name)) {
	init(Array<const ExprSymbol>(x),y);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprNode& y, const char* name) : name(duplicate_or_generate(name)) {
	init(Array<const ExprSymbol>(x1,x2),y);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprNode& y, const char* name) : name(duplicate_or_generate(name)) {
	init(Array<const ExprSymbol>(x1,x2,x3),y);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprNode& y, const char* name) : name(duplicate_or_generate(name)) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4),y);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprNode& y, const char* name) : name(duplicate_or_generate(name)) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5),y);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprNode& y, const char* name) : name(duplicate_or_generate(name)) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6),y);
}

Function::Function(const Array<const ExprSymbol>& x, const ExprNode& y, const char* name) : name(duplicate_or_generate(name)) {
	init(x,y);
}

Function::Function(const Function& f) : name(strdup(f.name)) {
	//assert(f.root!=NULL);

	// Create the new symbols
	// we have to proceed first the symbols in order to guarantee that
	// they appear in the same order in "dest". Indeed, if we add the symbols
	// as they appear in the expression the copy of a a function (x,y)->y+x
	// would yield (y,x)->y+x.
	Array<const ExprSymbol> x(f.nb_symbols());
	for (int j=0; j<f.nb_symbols(); j++) {
		x.set_ref(j,ExprSymbol::new_(f.symbol(j).name,f.symbol(j).dim));
	}
	//cout << "new x=";
	//for (int j=0; j<new_x.size(); j++) cout << new_x[j].name << " ";
	//cout << endl;

	// Duplicate the expression
	const ExprNode& y=ExprCopy().copy(f.symbs,x,f.expr());

	init(x,y);
}

void Function::separate() {
	if (expr().type()==Dim::SCALAR) {
		comp=this;
		return;
	}

	comp = new Function[output_size()];
	// rem: dimension()==expr().dim.vec_size() if expr() is a vector
	//      and also fvec->nb_args if, in addition, fvec!=NULL

	const ExprVector* fvec=dynamic_cast<const ExprVector*>(&expr());
	const ExprNode* tmp=NULL;

	if (expr().dim.is_vector()) {
		for (int i=0; i<expr().dim.vec_size(); i++) {
			Array<const ExprSymbol> x(nb_symbols());
			for (int j=0; j<nb_symbols(); j++) {
				x.set_ref(j,ExprSymbol::new_(symbol(j).name,symbol(j).dim));
			}
			const ExprNode& y=ExprCopy().copy(symbs, x, fvec? fvec->arg(i) : *(tmp=&expr()[i]));
			if (tmp) delete (ExprNode*) tmp; // will not delete the subexpression
			comp[i].init(x,y);
		}
	}

	else {
		int n=expr().dim.dim3;
		for (int i=0; i<expr().dim.dim2; i++) {
			const ExprVector* fvec2=NULL;
			if (fvec) {
				fvec2=dynamic_cast<const ExprVector*>(&fvec->arg(i));
			}
			for (int j=0; j<n; j++) {
				Array<const ExprSymbol> x(nb_symbols());
				for (int k=0; k<nb_symbols(); k++) {
					x.set_ref(k,ExprSymbol::new_(symbol(k).name,symbol(k).dim));
				}
				const ExprNode& y=ExprCopy().copy(symbs, x,
						fvec2 ? fvec2->arg(j) : (fvec? *(tmp=&(fvec->arg(i)[j])) : *(tmp=&(expr()[i][j]))));
				if (tmp) delete (ExprNode*) tmp; // do not delete the subexpression
				comp[i*n+j].init(x,y);
			}
		}
	}

//	cout << "--------- separation ---------" << endl;
//	for (int i=0; i<dimension(); i++) {
//		cout << (*this)[i] << endl << endl;
//	}
//	cout << "------------------------------" << endl;
}

//void Function::set_expr(const ExprNode& expr) {
void Function::init(const Array<const ExprSymbol>& x, const ExprNode& y) {

	key_count=0;
	__all_symbols_scalar=true; // by default

	symbs.resize(x.size());

	for (int i=0; i<x.size(); i++) {
		symbs.set_ref(i,x[i]);
		add_symbol(&x[i]);
	}

	root=&y;

	BuildVectorOfNodes(exprnodes, x, y);

	FindInputsUsed fsu(x, y, is_used);

	for (int i=0; i<nb_nodes(); i++) {
		assert(node(i).deco.f==NULL); // this node must not belong to another function!
		node(i).deco.f=this;
	}

	decorate();

	separate();
}

void Function::add_symbol(const ExprSymbol* symbol) {

  id2info.insert_new(symbol->name, symbol);

  ((ExprSymbol&) *symbol).key = key_count;

  key_count ++;

  for (int i=0; i<symbol->dim.size(); i++)
	  is_used.push_back(false);               // all the components are unused by default

  __all_symbols_scalar &= symbol->dim.is_scalar();

}

void Function::decorate() const {
	assert(root!=NULL); // cannot decorate if there is no expression yet!

	Decorator d;
	d.decorate(*this);

	symbol_domains.resize(nb_symbols());
	symbol_deriv.resize(nb_symbols());

	((CompiledFunction&) cf).compile(*this); // now that it is decorated, it can be "compiled"

	// warning: to place after "compile" if compile modifies deco.d...
	for (int i=0; i<nb_symbols(); i++) {
		symbol_domains.set_ref(i,*symbol(i).deco.d);
		symbol_deriv.set_ref(i,*symbol(i).deco.g);
	}
}


} // namespace ibex
