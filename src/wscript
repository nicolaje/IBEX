#! /usr/bin/env python
# encoding: utf-8

import shutil, os

JAVA_PACKAGE = "ibex"

def configure (conf):
	conf.env.append_unique ("INCLUDES", ["../src/%s" % p for p in 
		". arithmetic bisector combinatorial contractor function numeric parser strategy symbolic tools".split()])

def build (bld):

	ibex_src = bld.path.ant_glob ("**/*.(cpp|yc|l)")

	ibex_hdr = bld.path.ant_glob ("**/ibex_*.h")
	ibex_hdr.append ("ibex_bias_or_gaol.h")

	# headers

	@bld.rule (
		target = "ibex_bias_or_gaol.h",
		vars   = ["INTERVAL_LIB"],
	)
	def _(tsk):
		tsk.outputs[0].write (
			"// This file is automatically generated */\n"
			"#define _IBEX_WITH_%s_ 1\n" % tsk.env['INTERVAL_LIB'])


	@bld.rule (
		target = "ibex.h",
		name   = "ibex_headers",
		source = ibex_hdr,
	)
	def tg_ibex_h (tsk):
		tsk.outputs[0].write (
			"// This file is automatically generated\n"
			+ "".join ('#include "%s"\n' % h.name for h in tsk.inputs))

	# JNI
	if bld.env["INCLUDES_JAVA"]:
		ibex_src.append ("java/ibex_Java.cpp")

		java_signature = JAVA_PACKAGE.replace (".", "_")
		java_path      = JAVA_PACKAGE.replace (".", "/")


		@bld.rule (
			target = "java/ibex_Java.cpp",
			source = "java/ibex_Java.cpp_",
		)
		def _(tsk):
			tsk.outputs[0].write (
				"// This file is generated from %s.\n"
				'#include "%s_Ibex.h_"\n%s'
				% (tsk.inputs[0].name, java_signature, 
				   tsk.inputs[0].read().replace ("Java_", "Java_%s_" % java_signature)
				))

		@bld.rule (
			target = "java/Ibex.java",
			source = "java/Ibex.java_",
		)
		def _(tsk):
			tsk.outputs[0].write (
				"// This file is generated from %s.\n"
				"package %s;\n%s"
				% (tsk.inputs[0].name, JAVA_PACKAGE, tsk.inputs[0].read()))

		bld (
			target = "java/%s/Ibex.class" % java_path,
			source = "java/Ibex.java",
			rule   = "${JAVAC} -d src/java ${SRC}"
		)

		bld (
			target = "java/%s_Ibex.h_" % java_signature,
			source = "java/%s/Ibex.class" % java_path,
			rule   = "${JAVAH} -jni -classpath src/java -o ${TGT} %s.Ibex" % JAVA_PACKAGE
		)

	# c++ compilation

	tg_ibex = bld.stlib (
		target = "ibex",
		use  = "JAVA",
		source = ibex_src
	)



	@bld.rule (
		name = "update lib/ and include/ directories",
		after = "cxxstlib ibex_headers",
		always = True,
	)
	def update_dirs (task):
		bld = task.generator.bld

		lib_nodes = tg_ibex.tasks[-1].outputs

		t = tg_ibex_h.tasks[0]
		include_nodes = list (t.inputs) + t.outputs

		for nodes, path in ((include_nodes, "include"),(lib_nodes, "lib")):
			if not os.path.isdir (path):
				os.mkdir (path)
			for n in nodes:
				shutil.copy (n.abspath(), os.path.join (path, n.name))

