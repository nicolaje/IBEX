#! /usr/bin/env python
# encoding: utf-8

JAVA_PACKAGE = "ibex"


def build (bld):

	# headers

	def gen_ibex_bias_or_gaol_h (tsk):
		with open (tsk.outputs[0].abspath(), "w") as out:
			out.write ("// This file is automatically generated */\n")
			out.write ("#define _IBEX_WITH_%s 1\n" % tsk.env['INTERVAL_LIB'])
	bld (
		target = "ibex_bias_or_gaol.h",
		rule   = gen_ibex_bias_or_gaol_h,
		vars   = "INTERVAL_LIB",
	)

	def gen_ibex_h (tsk):
		source = tsk.inputs[0].abspath()
		
		with open (tsk.outputs[0].abspath(), "w") as out:
			out.write ("// This file is automatically generated\n")

			for hdr in tsk.inputs:
				out.write ('#include "%s"\n' % hdr.name)

	bld (
		target = "ibex.h",
		source = """
			ibex_bias_or_gaol.h

			combinatorial/ibex_QInter.h
			function/ibex_BwdAlgorithm.h
			function/ibex_Function.h
			function/ibex_FwdAlgorithm.h
			function/ibex_CompiledFunction.h
			function/ibex_NumConstraint.h
			function/ibex_Gradient.h
			function/ibex_HC4Revise.h
			function/ibex_Decorator.h
			function/ibex_InHC4Revise.h
			function/ibex_Eval.h
			tools/ibex_NonRecoverableException.h
			tools/ibex_Agenda.h
			tools/ibex_DirectedHyperGraph.h
			tools/ibex_HyperGraph.h
			tools/ibex_SymbolMap.h
			tools/ibex_Timer.h
			tools/ibex_String.h
			tools/ibex_Array.h
			tools/ibex_Exception.h
			tools/ibex_BoolMask.h
			symbolic/ibex_CmpOp.h
			symbolic/ibex_ExprUnvectorize.h
			symbolic/ibex_ExprCopy.h
			symbolic/ibex_ExprPrinter.h
			symbolic/ibex_ExprLabel.h
			symbolic/ibex_Expr.h
			symbolic/ibex_ExprNodes.h
			symbolic/ibex_ExprReset.h
			symbolic/ibex_ExprVisitor.h
			symbolic/ibex_ExprSize.h
			symbolic/ibex_ExprCtr.h
			contractor/ibex_CtcHC4.h
			contractor/ibex_CtcPropag.h
			contractor/ibex_Ctc.h
			contractor/ibex_CtcCompo.h
			contractor/ibex_XNewton.h
			contractor/ibex_CtcUnion.h
			contractor/ibex_CtcAcid.h
			contractor/ibex_CtcSubBox.h
			contractor/ibex_CtcNewton.h
			contractor/ibex_EmptyBoxException.h
			contractor/ibex_Ctc3BCid.h
			contractor/ibex_CtcPrecision.h
			contractor/ibex_CtcFixPoint.h
			contractor/ibex_CtcProj.h
			contractor/ibex_CtcInteger.h
			contractor/ibex_CtcQInter.h
			parser/ibex_P_NumConstraint.h
			parser/ibex_ParserSource.h
			parser/ibex_Entity.h
			parser/ibex_Scope.h
			parser/ibex_P_ExprVisitor.h
			parser/ibex_P_ExprGenerator.h
			parser/ibex_MainGenerator.h
			parser/ibex_P_ExprPrinter.h
			parser/ibex_UnknownFileException.h
			parser/ibex_ConstantGenerator.h
			parser/ibex_CtrGenerator.h
			parser/ibex_System.h
			parser/ibex_SystemFactory.h
			parser/ibex_SyntaxError.h
			parser/ibex_P_Expr.h
			arithmetic/ibex_Domain.h
			arithmetic/ibex_IntervalVector.h
			arithmetic/ibex_Interval.h
			arithmetic/ibex_Matrix.h
			arithmetic/ibex_InnerArith.h
			arithmetic/ibex_Dim.h
			arithmetic/ibex_Vector.h
			arithmetic/ibex_bias_or_gaol.h
			arithmetic/ibex_InvalidIntervalVectorOp.h
			arithmetic/ibex_IntervalMatrixArray.h
			arithmetic/ibex_IntervalMatrix.h
			numeric/ibex_Newton.h
			numeric/ibex_Linear.h
			numeric/ibex_LinearException.h
			bisector/ibex_LargestFirst.h
			bisector/ibex_RoundRobin.h
			bisector/ibex_SmearFunction.h
			bisector/ibex_Bsc.h
			strategy/ibex_CellHeap.h
			strategy/ibex_Cell.h
			strategy/ibex_CellBuffer.h
			strategy/ibex_DefaultOptimizer.h
			strategy/ibex_Optimizer.h
			strategy/ibex_CellHeapOptim.h
			strategy/ibex_CellStack.h
			strategy/ibex_Backtrackable.h
			strategy/ibex_Solver.h
			strategy/ibex_Paver.h
			strategy/ibex_SubPaving.h
		""",
		rule   = gen_ibex_h
	)

	# JNI
	jni_source = ""
	if bld.env["INCLUDES_JAVA"]:
		jni_source = "java/ibex_Java.cpp"

		java_signature = JAVA_PACKAGE.replace (".", "_")
		java_path      = JAVA_PACKAGE.replace (".", "/")

		def gen_ibex_java_cpp (tsk):
			source = tsk.inputs[0].abspath()
			target = tsk.outputs[0].abspath()
			
			with open (target, "w") as out:
				out.write ("// This file is generated from %s.\n" % tsk.inputs[0].name)
				out.write ('#include "%s_Ibex.h_"\n' % java_signature)
				for line in open (source):
					out.write (line.replace ("Java_", "Java_%s_" % java_signature))

		bld (
			target = jni_source,
			source = "java/ibex_Java.cpp_",
			rule   = gen_ibex_java_cpp
		)

		def gen_ibex_java (tsk):
			source = tsk.inputs[0].abspath()
			target = tsk.outputs[0].abspath()
			
			with open (target, "w") as out:
				out.write ("// This file is generated from %s.\n" % tsk.inputs[0].name)
				out.write ("package %s;" % JAVA_PACKAGE)
				map (out.write, open (source))

		bld (
			target = "java/Ibex.java",
			source = "java/Ibex.java_",
			rule   = gen_ibex_java
		)

		bld (
			target = "java/%s/Ibex.class" % java_path,
			source = "java/Ibex.java",
			rule   = "${JAVAC} -d src/java ${SRC}"
		)

		bld (
			target = "java/%s_Ibex.h_" % java_signature,
			source = "java/%s/Ibex.class" % java_path,
			rule   = "${JAVAH} -jni -classpath src/java -o ${TGT} %s.Ibex" % JAVA_PACKAGE
		)

	# c++ compilation

	bld.stlib (
		target = "ibex",
		name = "ibex",
		use  = "soplex interval JAVA",
		includes = "arithmetic bisector combinatorial contractor function numeric parser strategy symbolic tools",
		cxxflags = "-O3 -DNDEBUG -Wno-deprecated",
		source = """
			arithmetic/ibex_Dim.cpp
			arithmetic/ibex_Domain.cpp
			arithmetic/ibex_InnerArith.cpp
			arithmetic/ibex_Interval.cpp
			arithmetic/ibex_IntervalMatrixArray.cpp
			arithmetic/ibex_IntervalMatrix.cpp
			arithmetic/ibex_IntervalVector.cpp
			arithmetic/ibex_LinearArith.cpp
			arithmetic/ibex_Matrix.cpp
			arithmetic/ibex_Vector.cpp
			bisector/ibex_Bsc.cpp
			bisector/ibex_LargestFirst.cpp
			bisector/ibex_RoundRobin.cpp
			bisector/ibex_SmearFunction.cpp
			combinatorial/ibex_QInter.cpp
			contractor/ibex_Ctc3BCid.cpp
			contractor/ibex_CtcAcid.cpp
			contractor/ibex_CtcCompo.cpp
			contractor/ibex_Ctc.cpp
			contractor/ibex_CtcFixPoint.cpp
			contractor/ibex_CtcHC4.cpp
			contractor/ibex_CtcInteger.cpp
			contractor/ibex_CtcNewton.cpp
			contractor/ibex_CtcPrecision.cpp
			contractor/ibex_CtcProj.cpp
			contractor/ibex_CtcPropag.cpp
			contractor/ibex_CtcQInter.cpp
			contractor/ibex_CtcSubBox.cpp
			contractor/ibex_CtcUnion.cpp
			contractor/ibex_XNewton.cpp
			function/ibex_CompiledFunction.cpp
			function/ibex_Decorator.cpp
			function/ibex_Eval.cpp
			function/ibex_Function.cpp
			function/ibex_Gradient.cpp
			function/ibex_HC4Revise.cpp
			function/ibex_InHC4Revise.cpp
			numeric/ibex_Linear.cpp
			numeric/ibex_Newton.cpp
			parser/ibex_ConstantGenerator.cpp
			parser/ibex_CtrGenerator.cpp
			parser/ibex_Entity.cpp
			parser/ibex_MainGenerator.cpp
			parser/ibex_ParserSource.cpp
			parser/ibex_P_Expr.cpp
			parser/ibex_P_ExprGenerator.cpp
			parser/ibex_P_ExprPrinter.cpp
			parser/ibex_P_NumConstraint.cpp
			parser/ibex_Scope.cpp
			parser/ibex_SyntaxError.cpp
			parser/ibex_System.cpp
			parser/ibex_SystemFactory.cpp
			parser/lexer.l
			parser/parser.yc
			strategy/ibex_Backtrackable.cpp
			strategy/ibex_CellBuffer.cpp
			strategy/ibex_Cell.cpp
			strategy/ibex_CellHeap.cpp
			strategy/ibex_CellHeapOptim.cpp
			strategy/ibex_CellStack.cpp
			strategy/ibex_DefaultOptimizer.cpp
			strategy/ibex_Optimizer.cpp
			strategy/ibex_Paver.cpp
			strategy/ibex_Solver.cpp
			strategy/ibex_SubPaving.cpp
			symbolic/ibex_CmpOp.cpp
			symbolic/ibex_ExprCopy.cpp
			symbolic/ibex_Expr.cpp
			symbolic/ibex_ExprLabel.cpp
			symbolic/ibex_ExprNodes.cpp
			symbolic/ibex_ExprPrinter.cpp
			symbolic/ibex_ExprReset.cpp
			symbolic/ibex_ExprSize.cpp
			symbolic/ibex_ExprUnvectorize.cpp
			tools/ibex_Agenda.cpp
			tools/ibex_DirectedHyperGraph.cpp
			tools/ibex_Exception.cpp
			tools/ibex_HyperGraph.cpp
			tools/ibex_NonRecoverableException.cpp
			tools/ibex_String.cpp
			tools/ibex_Timer.cpp

			%s
		""" % jni_source)


