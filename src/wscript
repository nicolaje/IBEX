#! /usr/bin/env python
# encoding: utf-8

import shutil, os

JAVA_PACKAGE = "ibex"

def configure (conf):
	conf.env.append_unique ("INCLUDES", ["../src/%s" % p for p in 
		". arithmetic bisector combinatorial contractor function numeric parser strategy symbolic tools".split()])

def build (bld):

	ibex_src = bld.path.ant_glob ("**/*.(cpp|yc|l)")

	ibex_hdr = bld.path.ant_glob ("**/ibex_*.h")
	ibex_hdr.append ("ibex_bias_or_gaol.h")

	# headers

	INCDIR = "${PREFIX}/include/ibex"

	@bld.rule (
		target = "ibex_bias_or_gaol.h",
		vars   = ["INTERVAL_LIB"],
	)
	def _(tsk):
		tsk.outputs[0].write (
			"// This file is automatically generated */\n"
			"#define _IBEX_WITH_%s_ 1\n" % tsk.env['INTERVAL_LIB'])


	@bld.rule (
		target = "ibex.h",
		name   = "ibex_headers",
		source = ibex_hdr,
		install_path = INCDIR,
	)
	def _(tsk):
		tsk.outputs[0].write (
			"// This file is automatically generated\n"
			+ "".join ('#include "%s"\n' % h.name for h in tsk.inputs))
	
	bld.install_files (INCDIR, ibex_hdr)
	bld.install_files (INCDIR, bld.path.ant_glob ("**/ibex_*.h_"))

	# JNI
	if bld.env.WITH_JNI:
		ibex_src.append ("java/ibex_Java.cpp")

		java_signature = JAVA_PACKAGE.replace (".", "_")
		java_path      = JAVA_PACKAGE.replace (".", "/")


		@bld.rule (
			target = "java/ibex_Java.cpp",
			source = "java/ibex_Java.cpp_",
		)
		def _(tsk):
			tsk.outputs[0].write (
				"// This file is generated from %s.\n"
				'#include "%s_Ibex.h_"\n%s'
				% (tsk.inputs[0].name, java_signature, 
				   tsk.inputs[0].read().replace ("Java_", "Java_%s_" % java_signature)
				))

		@bld.rule (
			target = "java/Ibex.java",
			source = "java/Ibex.java_",
		)
		def _(tsk):
			tsk.outputs[0].write (
				"// This file is generated from %s.\n"
				"package %s;\n%s"
				% (tsk.inputs[0].name, JAVA_PACKAGE, tsk.inputs[0].read()))

		bld (
			target = "java/%s/Ibex.class" % java_path,
			source = "java/Ibex.java",
			rule   = "${JAVAC} -d src/java ${SRC}"
		)

		bld (
			target = "java/%s_Ibex.h_" % java_signature,
			source = "java/%s/Ibex.class" % java_path,
			rule   = "${JAVAH} -jni -classpath src/java -o ${TGT} %s.Ibex" % JAVA_PACKAGE
		)

	# c++ compilation
	tg_ibex = (bld.shlib if bld.env.ENABLE_SHARED else bld.stlib) (
		target = "ibex",
		use  = "JAVA gaol_objs gdtoa_objs ultim_objs",
		source = ibex_src,
		install_path = bld.env.LIBDIR,
	)

	# pkg-config file
	@bld.rule (
		target = "ibex.pc",
		vars = "PREFIX LIB VERSION INCLUDES LIBPATH".split(),
		install_path = "${PREFIX}/share/pkgconfig",
	)
	def _ (tsk):
		tsk.outputs[0].write("""
prefix=%s
includedir=${prefix}/include
libdir=${prefix}/lib

Name: ibex
Description: A C++ library for interval-based algorithm design
Version: %s
Cflags: -I${includedir}/ibex %s
Libs: -L${libdir}/ibex %s -libex %s
""" % (		tsk.env.PREFIX, tsk.env.VERSION,
		# extra CFLAGS
		" ".join(("-I%s" % p) for p in filter (os.path.isabs, tsk.env.INCLUDES)),
		# extra LIBPATH
		" ".join(("-L%s" % p) for p in filter (os.path.isabs, tsk.env.LIBPATH_IBEX_DEPS)),
		# extra LIB
		" ".join(("-l%s" % l) for l in tsk.env.LIB_IBEX_DEPS),
	))

