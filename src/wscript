#! /usr/bin/env python
# encoding: utf-8

import shutil

JAVA_PACKAGE = "ibex"


def build (bld):

	ibex_src = bld.path.ant_glob ("**/*.(cpp|yc|l)")

	ibex_hdr = bld.path.ant_glob ("**/ibex_*.h")
	ibex_hdr.append ("ibex_bias_or_gaol.h")

	# headers

	def gen_ibex_bias_or_gaol_h (tsk):
		with open (tsk.outputs[0].abspath(), "w") as out:
			out.write ("// This file is automatically generated */\n")
			out.write ("#define _IBEX_WITH_%s_ 1\n" % tsk.env['INTERVAL_LIB'])
	bld (
		target = "ibex_bias_or_gaol.h",
		rule   = gen_ibex_bias_or_gaol_h,
		vars   = "INTERVAL_LIB",
	)

	def gen_ibex_h (tsk):
		source = tsk.inputs[0].abspath()
		
		with open (tsk.outputs[0].abspath(), "w") as out:
			out.write ("// This file is automatically generated\n")

			for hdr in tsk.inputs:
				out.write ('#include "%s"\n' % hdr.name)

	tg_ibex_h = bld (
		target = "ibex.h",
		name   = "ibex_headers",
		source = ibex_hdr,
		rule   = gen_ibex_h
	)

	# JNI
	if bld.env["INCLUDES_JAVA"]:
		ibex_src.append ("java/ibex_Java.cpp")

		java_signature = JAVA_PACKAGE.replace (".", "_")
		java_path      = JAVA_PACKAGE.replace (".", "/")

		def gen_ibex_java_cpp (tsk):
			source = tsk.inputs[0].abspath()
			target = tsk.outputs[0].abspath()
			
			with open (target, "w") as out:
				out.write ("// This file is generated from %s.\n" % tsk.inputs[0].name)
				out.write ('#include "%s_Ibex.h_"\n' % java_signature)
				for line in open (source):
					out.write (line.replace ("Java_", "Java_%s_" % java_signature))

		bld (
			target = "java/ibex_Java.cpp",
			source = "java/ibex_Java.cpp_",
			rule   = gen_ibex_java_cpp
		)

		def gen_ibex_java (tsk):
			source = tsk.inputs[0].abspath()
			target = tsk.outputs[0].abspath()
			
			with open (target, "w") as out:
				out.write ("// This file is generated from %s.\n" % tsk.inputs[0].name)
				out.write ("package %s;" % JAVA_PACKAGE)
				map (out.write, open (source))

		bld (
			target = "java/Ibex.java",
			source = "java/Ibex.java_",
			rule   = gen_ibex_java
		)

		bld (
			target = "java/%s/Ibex.class" % java_path,
			source = "java/Ibex.java",
			rule   = "${JAVAC} -d src/java ${SRC}"
		)

		bld (
			target = "java/%s_Ibex.h_" % java_signature,
			source = "java/%s/Ibex.class" % java_path,
			rule   = "${JAVAH} -jni -classpath src/java -o ${TGT} %s.Ibex" % JAVA_PACKAGE
		)

	# c++ compilation

	tg_ibex = bld.stlib (
		target = "ibex",
		use  = "soplex interval JAVA",
		includes = ". arithmetic bisector combinatorial contractor function numeric parser strategy symbolic tools",
		cxxflags = "-O3 -DNDEBUG -Wno-deprecated",
		source = ibex_src
	)


	def update_dirs (task):
		bld = task.generator.bld

		lib_nodes = tg_ibex.tasks[-1].outputs

		t = tg_ibex_h.tasks[0]
		include_nodes = list (t.inputs) + t.outputs

		for nodes, path in ((include_nodes, "include"),(lib_nodes, "lib")):
			for n in nodes:
				shutil.copy (n.abspath(), path)

	bld (
		name = "update lib/ and include/ directories",
		after = "cxxstlib ibex_headers",
		always = True,
		rule = update_dirs,
	)

